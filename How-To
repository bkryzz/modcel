<b>INSTALLATION AND FIRST-RUN NOTES FOR v.2.5d</b> (beta/not-for-development)

<b> 1) You can select an arbitrary number of cell types:</b>
     - A "input_cell" file defines the number of different cells and their phenotypes. The file can be created during the normal GUI-directed input for each simulation, or written/modified by hand before launching the main simulation.
     - Cells can be 'solid' or 'fluid'. Fluid cells describe regions of blood, lymph or other fluids flowing in the system. The fluids can carry in/out nutrients, oxygen, CO2 etc.
     - According to the initial prescription, the boundaries between solid and fluid cells can include specially-designed boundary agents.
     - NCEL = NUMF(total solid/fluid agents) + NDIS (boundary agents)
     - After building the first Voronoi map, all cells are set to
       parenchyma ITYPE=1 (whatever you chose it to represent...). If both nr_cel and fl_cel are =0, an empty Voronoi lattice is generated, to be filled by hand by putting down agents one by one.
     - Note that fluid cells are selected after the Voronoi map
       of the whole tissue has been constructed. This can be done
       by hand-picking with the mouse, or by asking the code to
       provide a random guess of vases distribution.
       
<b>NOTE:</b> How a cell-agent actually behaves is fixed by the chemistry, see 2) below. 

<b>IN PRACTICE:</b> even if you can use a potentially illimited number of variants, try to use not more than 4-5 different cell types, and 1 or 2 fluids, otherwise the model could become very difficult to analyse and interpret. Choose to make the chemistry as rich as possible, instead.

  2) You can select an arbitrary number of metabolites, with the FIXED convention that: 
     1=Insulin, 2=glucose, 3=oxygen, 4=FFA (free fatty acids).
     Then, the indices 5,6,7... can be used for any other metabolite.
     - Chemical equations for metabolite cycling (the 4 basic plus any other) can be coded in CellML language. The easiest
       way to provide them is to use <b>OpenCOR</b> to script the eqs
       and then export them to Fortran; they will be linked by
       MODLOG and used normally. Alternatively, you can code them yourself in the corresponding subroutine. (Please note that Open COR export into F90 is not foolproof, so you better check the resulting *.f file in the directory ./models/)
     - Be sure to create a 'compartment' for each of the nr_cel
       and fl_cel cell types, and include at least one chemical equation per compartment. For solid cells, you should define
       how metabolites are consumed, created and exchanged. For
       blood cells you must decide how nutrients, oxygen etc.
       are delivered, and/or how fluids (bile, lymph,...) are
       recovered from the solid cells and transported.

  3) Boolean logic rules determine how cells evolve, according to the summary of their chemical activity during time (a typical time step used in MODCEL simulations is 1 minute, adjustable with the parameter ITCONV). That is, how cells can go around their phases (G1, S, G2, M), enter the G0, move, duplicate, trans-differentiate, or differentiate (if they are stems), go into apoptose or necrose, and more. (For the moment, this step must be hard-coded into the routines. In future versions we plan to make it automatic and self-generating.)


------------------------------------------------------------------
<b>To run the main program MODLOG requires a F90 compiler (GNU is ok) 
and a standard Python installation (v.3.7 or higher recommended).</b>

<b>The library GUIzero must be installed. On Windows/Mac just type:</b>
<i>pip3 install guizero</i>

<b>On Linux you may need to install tkinter first, e.g.:</b>
<i>sudo apt install python3-tk</i>

***

0) Always run your simulations in the main directory (i.e., you
must see there ./source/ ./models/ ./bin/ etc as subdirectories). 
At the very first use, run 'make install'. (NOTE: if you do a
'make clean', e.g. to get rid of old stuff, you will have to run
again 'make install'.)

1) MODCEL main program can be started with the script
                     ./modcel 
It will launch a first GUI window allowing the user to enter a number of different global parameters for the simulation.

2) In the second GUI window opens after the first one is closed, and allows the user to define cells and phenotypes. According to the metabolic model chosen in step 1), some values are pre-filled, however the user can change them all.

3) The next step is to provide the code with a tissue metabolic
model, selected from those you have arranged in the directory ./models/.
This can be prepared in CellML format, or more easily can
be generated by OpenCOR. Run it through OpenCOR to generate the
corresponding Fortran code. 
MANDATORY: the models must be stored in the local ./models/ 
directory, where the ./modcel script will look for finding them.

4) The script recompiles the main program MODLOG by including your
chosen metabolic model. Then it opens a dialog window, where you
can specify other running parameters for a new simulation, or ask
the program to read back a previously stored configuration (this
is the contents of the binary file BACKUP; MODLOG keeps track of 
the last configuration in a file BACKUP_OLD whenever a new conf
is generated).

6) After the whole preparation part, the F90 code
   starts. It creates a new python module "voro.py" to:
   3.1) Build a new Voronoi 2D cell map
   3.2) Read an existing 2D cell map and modify it
   3.3) Read an histological section and obtain the
        corresponding cell map (experimental feature!)

   If the map includes fluids (e.g. blood sinusoids,
   bile ducts) the next step is to build triangular mesh
   for the Navier-Stokes solver. MODLOG understands it
   and creates the python module "triang.py", which will
   propose different 2D triangulations. (NOTE: this step is on hold in the current release of the code).

   <i>You will notice that in the console window, messages and comments coming from the Fortran code appear in</i> UPPERCASE, <i>while messages and comments from the Python modules appear in</i> lowercase.

7) Ensuite, the complete simulation can start

Different types of cells are included in 2.5 version. 
E.g. for the liver model with nr_cel=2 and fl_cel=3 they could be:
   ITYP=1 normal hepatocyte
   ITYP=2 diseased hepatocyte (fibrotic etc)
   ITYP=3 venous capillary
   ITYP=4 arterial capillary
   ITYP=5 bile duct,
plus the special "boundary agents" defining the interface between
the solid and fluid regions (e.g., including macrophages, stellate cells...)

-------------------------------------------------------
  Damage: each cell has a number of tags describing the 
  accumulation of individual defects (e.g., SSB, DSB, 
  base-excision, base-polymerization etc.)
  
----- In V1.0 only SSB and DSB damages to DNA were implemented

  Repair: each cell has an individual probability for 
  repairing the different defects.

  Inheritance: each cell has an individual probability 
  for duplication, the two sister cells inherit the DNA 
  of the mother cell.

  Geometry & topology: each cell in the model occupies a
  site of a regular lattice and “knows” its connectivity 
  to neighbor cells, allowing distributed effects
  
----- In V1.0 only 2D was implemented with diamond symmetry

----- In V2.0 the 2D/3D model introduced Voronoi tessellation

----- In V2.4 the 2D/3D model restored also square/cube symmetry

  Chemistry: reaction-diffusion equations describing the 
  flux of chemicals can be coupled to the spatial matrix 
  
----- In V1.0 only one tracer 2D field wass implemented

----- In V2.0 glucose/oxygen/activ/necro implemented

----- In V2.4 the interface to CellML was initiated

***

<b>BUILD AND COMPILE</b>

The main directory contains this README file, a ./source/ folder,
./bin/ folder where the executables are stored, ./models/ which
contains chemical examples, ./images/ for logos, a generic Makefile 
and a sample input file. 

Little modification is needed for the Makefile, usually only the
choice of the Fortran compiler needs to be updated for your 
local machine.

Once the 'make' command is issued in the main directory
compilation starts. 

Two executable files are created in the main directory:

- MODLOG, the executable code

- modmin, an utility to convert xyz files (for old versions, now
  fully replaced by Python utilities)

<b>RUNNING THE CODE</b>

MODLOG looks for two input files named 'input' and 'input_cell' in the same
directory from which it is launched. the sample input
provided should be enough self-explanatory. Starting from v2.4,
this input file is interactively generated by the GUI windows.

<b>ANALYZING THE SIMULATION</b>

During the simulation, MODLOG will frequently stop to propose the
user with maps of the evolving cell layout. The map is clickable
(instructions provided on-screen) and can be used to, e.g., select
some (one or more) cells and map the time evolution of one or more 
metabolite. Also, complete <i>xy</i> density maps can be output for 
any given metabolite at different times.

Multi-cell statistics are output at fixed (user-selected) times.

Cell spatial configurations and metabolite space- and time-dependent densities
are saved in binary files at fixed (user-selected) times.

The two scripts <i>avid.py</i> and <i>mpeg.py</i> can generate videos of the
simulation in the AVI (more detailed) or MPEG (lighter) format.
Frames are stored in the ./manips/ subdirectory. Frame-rate can
be adjusted by editing the two python scripts.

<b>OUTPUT FILES</b>


ACCESSORY DIRECTORIES (for old versions before v2.0)

tcl_scripts contains some tcl scripts for treating graphical
            outputs

gnuplot_scripts contains scripts to accelerate the production
            of gnuplot elaborate graphics

LIST        contains a (not updated, sorry) list of the code
            variables and array names

